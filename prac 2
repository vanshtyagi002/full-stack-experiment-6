Complete Express.js JWT Banking API Example----

const express = require('express');
const jwt = require('jsonwebtoken');
const app = express();

app.use(express.json());

// Hardcoded user and account for this demo
const user = { username: 'user1', password: 'password123' };
let account = { balance: 1000 };

// Secret for JWT signing (use env in real apps)
const JWT_SECRET = 'secretkey123';

// Middleware to protect routes
function authMiddleware(req, res, next) {
  const header = req.headers['authorization'];
  if (!header) return res.status(403).json({ message: 'Invalid or expired token' });
  const token = header.split(' ')[1];
  if (!token) return res.status(403).json({ message: 'Invalid or expired token' });

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ message: 'Invalid or expired token' });
    req.user = decoded;
    next();
  });
}

// Login endpoint
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  if (username === user.username && password === user.password) {
    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' });
    return res.json({ token });
  }
  res.status(401).json({ message: 'Invalid credentials' });
});

// Protected route: Get balance
app.get('/balance', authMiddleware, (req, res) => {
  res.json({ balance: account.balance });
});

// Protected route: Deposit
app.post('/deposit', authMiddleware, (req, res) => {
  const { amount } = req.body;
  account.balance += amount;
  res.json({ message: `Deposited $${amount}`, newBalance: account.balance });
});

// Protected route: Withdraw
app.post('/withdraw', authMiddleware, (req, res) => {
  const { amount } = req.body;
  if (amount > account.balance)
    return res.status(400).json({ message: 'Insufficient funds', newBalance: account.balance });
  account.balance -= amount;
  res.json({ message: `Withdrew $${amount}`, newBalance: account.balance });
});

app.listen(3000, () => console.log('Server running on port 3000'));
